# vim: ft=sh

_safe_str() {
    # XXX Returns a value in a variable, to avoid forking (for speed reasons)
    # Return value is in safe_str_result
    local str next ch
    str=$1
    safe_str_result=
    while [ -n "$str" ]; do
        next=${str#?}
        ch=${str%"$next"}
        str=$next
        case $ch in
            ([a-zA-Z0-9_]) ;;
            (*) ch=_;;
        esac
        safe_str_result=$safe_str_result$ch
    done
}

_cache_passwd() {
    # XXX Uses named variables as an associative array hack
    # Not always 100% accurate if paths contain "special characters"
    # Sets _homedir_* variables
    local x user home safe_str_result
    while IFS=: read -r user x x x x home x; do
        # Other than /root, make sure we have at least 2 path components
        case "$home" in
            (/*/* | /root) ;;
            (/*) continue;;
        esac
        _safe_str "$home"; home=$safe_str_result
        eval "_homedir_$home=\$user"
    done
    # Ensure that our home takes precedence over other users which may
    # share this home directory.
    _safe_str "$HOME"; home=$safe_str_result
    eval "_homedir_$home=\$USER"
}
_cache_passwd < /etc/passwd

_shortpath() {
    local part pretty_dir safe_str_result
    part=$1
    pretty_dir=
    while [ "${part%/*}" != "$part" ]; do
        _safe_str "$part"
        eval "pretty_dir=\$_homedir_$safe_str_result"
        [ -n "$pretty_dir" ] && break
        part=${part%/*}
    done
    if [ -z "$pretty_dir" ]; then
        pretty_dir=$1
    elif [ "$pretty_dir" = "$USER" ]; then
        pretty_dir=\~${1#$part}
    else
        pretty_dir=\~$pretty_dir${1#$part}
    fi
    printf %s\\n "$pretty_dir"
}

_exitcode() {
    local code="$?" cols
    if [ "$code" != 0 ]; then
        cols=$(tput cols)
        tput cuf $((cols-3))
        printf ':('
        tput cub $((cols-1))
        printf '\033[91;1m%s ' "$code"
    fi
}

_vcs_prompt() {
    printf " \033[35m(\033[39m%s\033[35m)\033[33m-\033[35m[\033[32m%s" "$1" "$2"
    [ "$#" = 3 ] && printf "\033[31m:\033[33m%s" "$3"
    printf "\033[35m]\033[0m"
}

_vcsinfo() {
    local evidence="$PWD" branch
    # Handle the simple case first
    if [ -r CVS/Repository ]; then
        _vcs_prompt cvs "$(cat CVS/Repository)"
        return
    fi

    # If PWD doesn't start with a /, exit to avoid an infinite loop
    # This "should never happen" but we all know what happens when
    # things "should never happen"...
    [ "${evidence#/}" = "$evidence" ] && return 1

    # bzr is dog slow, some others probably are too.
    # Scanning for evidence of each VCS in each parent directory is *much*
    # faster than launching each VCS to do the scanning and directory
    # traversal itself.
    while [ -n "$evidence" ]; do
        if [ -d "$evidence/.git" ] && branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
            [ "$branch" = HEAD ] && branch=$(git rev-parse --short HEAD)...
            _vcs_prompt git "$branch"
            return
        fi
        if [ -d "$evidence/.hg" ] && branch=$(hg branch 2>/dev/null); then
            _vcs_prompt hg "$branch"
            return
        fi
        if [ -d "$evidence/.bzr" ] && branch=$(bzr nick 2>/dev/null); then
            _vcs_prompt bzr "$branch" "$(bzr revno)"
            return
        fi
        if [ -d "$evidence/.svn" ] && info=$(svn info --non-interactive); then
            local line wcrp= dir= revs= nl="$(printf \\n.)" IFS; nl=${nl%.}
            IFS="$nl"
            for line in $info; do
                case "$line" in
                    "Working Copy Root Path: "*)
                        wcrp=${line#*: }
                        break;;
                esac
            done
            [ -n "$wcrp" ] && [ "$wcrp" != "$PWD" ] && info=$(svn info --non-interactive -- "$wcrp")
            for line in $info; do
                case "$line" in
                    "URL: "*) dir=${line#*: }; dir=${dir##*/};;
                    "Revision: "*) revs=${line#*: };;
                esac
            done
            [ -n "$dir" -a -n "$revs" ] && _vcs_prompt svn "$dir" "$revs" && return
        fi
        # Go up a directory
        evidence=${evidence%/*}
    done
}

PS1=$(printf '$(_exitcode)\033[0m%s\033[94;1m%s\033[0m@%s \033[1m$(_shortpath "$PWD")\033[0m$(_vcsinfo) %% ' "${debian_chroot+($debian_chroot)}" "$USER" "$(hostname)")

_this_rc=$ENV
unset ENV

alias ls='ls --color=auto -F'
alias l='ls -l'
alias ll='l -go'
alias lh='l -Ah'
alias ..='cd ..'
alias ...='cd ../..'

# {{{ Arrays in posix sh: <http://www.etalabs.net/sh_tricks.html>
_shell_quote() { printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }
_save_array() {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
# }}}

_dir_stack_size=20
_dir_stack=
pushd() {
    local old_dir="$PWD"
    if command cd "$@"; then
        eval set -- '"$old_dir"' "$_dir_stack"
        if [ $# -gt "$_dir_stack_size" ]; then
            # Cut array down to size
            eval set -- "$(printf '"$%s" ' $(seq 1 "$_dir_stack_size"))"
        fi
        _dir_stack=$(_save_array "$@")
    fi
}

popd() {
    eval set -- "$_dir_stack"
    if [ $# = 0 ]; then
        echo >&2 'popd: directory stack empty'
        false
    else
        cd -- "$1"; result=$?
        for d do printf '%s ' "$(_shortpath "$d")"; done; echo
        shift
        _dir_stack=$(_save_array "$@")
        return "$result"
    fi
}

dirs() {
    eval set -- "$_dir_stack"
    for d do printf '%s ' "$(_shortpath "$d")"; done; echo
}

alias cd=pushd
